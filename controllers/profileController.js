import { v2 as cloudinary } from "cloudinary";
import { StatusCodes } from "http-status-codes";
import multer from "multer";
import { CloudinaryStorage } from "multer-storage-cloudinary";
import { Profile } from "../models/profileModel.js";
cloudinary.config({cloud_name:process.env.CLOUD_NAME,api_key:process.env.API_KEY,api_secret:process.env.API_SECRET,secure:!0});const storage=new CloudinaryStorage({cloudinary:cloudinary,params:{folder:"profiles",allowed_formats:["jpg","jpeg","png","avif","webp"]}}),upload=multer({storage:storage}),createProfile=async(s,e)=>{try{const{name:t,age:a,gender:o,qualification:r,occupation:u,maritalStatus:i,caste:c,district:n,state:l}=s.body;if(!(t&&a&&o&&r&&u&&i&&c&&n&&l))return e.status(StatusCodes.BAD_REQUEST).json({success:!1,message:"Please fill all the fields"});if(s.file){const d=await Profile.create({name:t,age:a,gender:o,qualification:r,occupation:u,maritalStatus:i,caste:c,district:n,state:l,images:s.file.path});return e.status(StatusCodes.CREATED).json({success:!0,message:"Profile created successfully",profile:d})}return e.status(StatusCodes.BAD_REQUEST).json({success:!1,message:"Image file is required"})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:s.message})}},getProfile=async(s,e)=>{try{const s=await Profile.find().exec();return s.length?e.status(StatusCodes.OK).json({success:!0,profiles:s}):e.status(StatusCodes.NOT_FOUND).json({message:"No profiles found"})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:s.message})}},deleteProfile=async(s,e)=>{try{const{id:t}=s.params,a=await Profile.findByIdAndDelete(t);if(!a)return e.status(StatusCodes.NOT_FOUND).json({success:!1,message:"Profile not found"});const o=a.images.split("/").pop().split(".")[0];return await cloudinary.uploader.destroy(o),e.status(StatusCodes.OK).json({success:!0,message:"Profile deleted successfully"})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:s.message})}},updateProfile=async(s,e)=>{try{const{id:t}=s.params;let a=await Profile.findById(t);if(!a)return e.status(StatusCodes.NOT_FOUND).json({success:!1,message:"Profile not found"});if(s.file){const e=a.images.split("/").pop().split(".")[0];await cloudinary.uploader.destroy(e),s.body.images=s.file.path}return a=await Profile.findByIdAndUpdate(t,s.body,{new:!0}),e.status(StatusCodes.OK).json({success:!0,message:"Profile updated successfully",profile:a})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:s.message})}},singleProfile=async(s,e)=>{try{const{id:t}=s.params,a=await Profile.findById(t).exec();return a?e.status(StatusCodes.OK).json({success:!0,message:"Profile found",profile:a}):e.status(StatusCodes.NOT_FOUND).json({success:!1,message:"Profile not found"})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:s.message})}},searchProfile=async(s,e)=>{try{const{gender:t,maritalStatus:a,age:o,caste:r,state:u}=s.query,i={};if(t&&(i.gender=t),a&&(i.maritalStatus=a),o){const[s,e]=o.split("-").map(Number);i.age={$gte:s,$lte:e}}r&&(i.caste=r),u&&(i.state=u);const c=await Profile.find(i).exec();return c.length?e.status(StatusCodes.OK).json({success:!0,profiles:c}):e.status(StatusCodes.NOT_FOUND).json({success:!1,message:"No profiles found"})}catch(s){return e.status(StatusCodes.INTERNAL_SERVER_ERROR).json({success:!1,message:"Server error",error:s})}};export { createProfile, deleteProfile, getProfile, searchProfile, singleProfile, updateProfile, upload };
